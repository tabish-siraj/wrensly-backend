// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["strictUndefinedChecks"]
}

// output   = "../src/generated/prisma"

datasource db {
  // provider = "sqlite"
  // url      = "file:./dev.db"
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  username   String?   @unique
  email      String    @unique
  password   String
  isActive   Boolean   @default(true)
  isVerified Boolean   @default(false)
  isAdmin    Boolean   @default(false)
  isBanned   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  profile   Profile?
  posts      Post[]
  comments   Comment[]
  likes      Like[]
  bookmarks  Bookmark[]
  followers  Follow[]   @relation("Follower")
  following Follow[]   @relation("Following")
  feed      Feed[]
  repost         Repost[]
}

model Profile {
  id          String    @id @default(cuid())
  userId      String    @unique
  firstName   String?
  lastName    String?
  dateOfBirth DateTime? @db.Date
  gender      String?
  bio         String?
  avatar      String?
  city        String?
  state       String?
  country     String?
  phone       String?
  website     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  deletedAt   DateTime?

  user              User                @relation(fields: [userId], references: [id])
  attachments        ProfileAttachment[]
}

model Post {
  id        String    @id @default(cuid())
  content   String?
  userId    String
  parentId  String? // for reposts or quotes
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?

  user           User             @relation(fields: [userId], references: [id])
  parent         Post?            @relation("ParentPost", fields: [parentId], references: [id])
  children           Post[]           @relation("ParentPost")
  attachments   PostAttachment[]
  comments        Comment[]
  likes           Like[]
  bookmarks       Bookmark[]
  feeds           Feed[]
  reposts         Repost[]

  @@index([userId])
  @@index([createdAt])
}

model Repost {
  id        String    @id @default(cuid())
  userId String
  postId String
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId]) // prevent duplicate reposts
  @@index([postId])
  @@index([userId])
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  postId    String
  userId    String
  parentId  String? // for replies to comments
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?

  post              Post                @relation(fields: [postId], references: [id])
  user              User                @relation(fields: [userId], references: [id])
  parent            Comment?            @relation("ParentComment", fields: [parentId], references: [id])
  replies                Comment[]           @relation("ParentComment")
  attachments  CommentAttachment[]

  @@index([postId])
  @@index([userId])
  @@index([parentId])
}

model Like {
  id        String    @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Bookmark {
  id        String    @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
  @@index([userId])
}

model Follow {
  id          String    @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?

  follower  User @relation("Follower", fields: [followerId], references: [id])
  following User @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Feed {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@index([userId, createdAt(sort: Desc)])
}


model Attachment {
  id        String    @id @default(cuid())
  url       String
  type      String
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  postAttachments    PostAttachment[]
  commentAttachments CommentAttachment[]
  profileAttachments ProfileAttachment[]
}

model ProfileAttachment {
  id           String    @id @default(cuid())
  profileId    String
  attachmentId String
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?

  profile    Profile    @relation(fields: [profileId], references: [id])
  attachment Attachment @relation(fields: [attachmentId], references: [id])

  @@index([profileId])
}

model PostAttachment {
  id           String    @id @default(cuid())
  postId       String
  attachmentId String
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?

  post       Post       @relation(fields: [postId], references: [id])
  attachment Attachment @relation(fields: [attachmentId], references: [id])

  @@index([postId])
}

model CommentAttachment {
  id           String    @id @default(cuid())
  commentId    String
  attachmentId String
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?

  comment    Comment    @relation(fields: [commentId], references: [id])
  attachment Attachment @relation(fields: [attachmentId], references: [id])

  @@index([commentId])
}

